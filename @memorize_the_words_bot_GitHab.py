import logging
import asyncio
import random
from time import time
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

BOT_TOKEN = 'your token'

loop = asyncio.new_event_loop()
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, loop=loop, storage=storage)

keyboards = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
    [
        InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data='play')
    ],
])


class Game(StatesGroup):
    level_1 = State()


def range_words():
    list_words = []  # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ —Å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
    with open('list_words.txt', encoding='utf8') as lw:
        for i in lw:
            list_words.append(i.replace('\n', ''))
    temporary_list = []  # —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è 30 —Å–ª–æ–≤
    while len(temporary_list) != 30:
        temporary_list = random.sample(list_words, 30)
        temporary_list = list(set(temporary_list))  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤
    temporary_list = sorted(temporary_list)  # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    string_words = '        '.join(temporary_list)  # —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
    return string_words


@dp.message_handler(commands=['start'])
async def get_start(message: Message):
    await message.answer('<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> <i>–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é) '
                         '–ø–∞–º—è—Ç—å. –Ø –¥–∞–º —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 30 —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å.</i> <b>–ß–µ—Ä–µ–∑ –¥–≤–µ –º–∏–Ω—É—Ç—ã</b><i>'
                         ' —è —É–¥–∞–ª—é —Å–ø–∏—Å–æ–∫ –∏ —Ç–µ–±–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É, '
                         '–∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å, –±—ã–ª–æ –ª–∏ –æ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∏–ª–∏ –Ω–µ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞, –≤—Å–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. –£–¥–∞—á–∏, '
                         '–º–æ–π –¥—Ä—É–≥!</i>',
                         parse_mode='HTML', reply_markup=keyboards)


@dp.callback_query_handler(text='play', state=None)
async def play_game(call: CallbackQuery):
    await call.answer(text=f'–ó–∞–ø–æ–º–Ω–∏ –≤—Å–µ —Å–ª–æ–≤–∞!', show_alert=True)
    string_words = range_words()
    print(string_words, '\n\n')
    del_mes = await bot.send_message(call.from_user.id, text=f'{string_words}')
    await asyncio.sleep(120)
    await del_mes.delete()
    await bot.send_message(call.from_user.id, text='–í—Å–ø–æ–º–Ω–∏ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É!\n'
                                                   '–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É, –≤ –ú–ï–ù–Æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –û–¢–ú–ï–ù–ê!')
    s = set()
    await Game.level_1.set()

    @dp.message_handler(state="*", commands='cancel')
    @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    async def cancel_handler(message: Message, state: FSMContext):
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')

    @dp.message_handler(state=Game.level_1)
    async def level_1(message: Message, state: FSMContext):
        async with state.proxy() as data:
            data['word'] = message.text.lower().replace(' ', '').replace('—ë', '–µ')
        list_words = string_words.split()
        if data['word'] in list_words:
            s.add(data['word'])
            await bot.send_message(message.from_user.id, text=f'–í–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {len(s)}')
        else:
            await bot.send_message(message.from_user.id, text=f'–ù–µ –±—ã–ª–æ —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π!')
        if len(s) == 30:
            await bot.send_message(message.from_user.id, text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å! ü•≥')
            await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
